package dev.p0ke.coolemojis.manager;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import dev.p0ke.coolemojis.CoolEmojis;
import dev.p0ke.coolemojis.config.CoolEmojisConfig;
import net.fabricmc.loader.api.FabricLoader;
import org.apache.commons.lang3.StringUtils;

import java.io.*;
import java.lang.reflect.Type;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class PackManager {

    private static final String MAP_COMMENT = "## You can edit emoji names or add new ones\n## name1,name2,name3=char";
    private static final String PACK_MCMETA = "{\"pack\":{\"pack_format\":8,\"description\":\"ยง3Generated by Cool Emojis\"}}";

    public static boolean generatePack() {
        try {
            Path dirPath = FabricLoader.getInstance().getGameDir().resolve("emojis");
            File emojiFolder = dirPath.toFile();
            if (!emojiFolder.exists()) return false; // no emojis to create pack from

            File[] emojiImages = emojiFolder.listFiles(f -> f.getName().endsWith(".png"));
            if (emojiImages.length == 0) return false;

            // create output folder if it's not there already
            Path outputPath = dirPath.resolve("output");
            if (!outputPath.toFile().exists()) outputPath.toFile().mkdir();

            // set up resources, zip file
            InputStream packIcon = PackManager.class.getClassLoader().getResourceAsStream("assets/cool-emojis/icon.png");
            FileOutputStream fos = new FileOutputStream(outputPath.resolve("pack.zip").toFile());
            ZipOutputStream packZipStream = new ZipOutputStream(fos);
            writeToZip(packZipStream, "pack.png", packIcon);
            writeToZip(packZipStream, "pack.mcmeta", new ByteArrayInputStream(PACK_MCMETA.getBytes(StandardCharsets.UTF_8)));

            // generate font file, map file, and copy over images
            List<FontEntry> providers = new ArrayList<>();
            List<String> map = new ArrayList<>();
            map.add(MAP_COMMENT);
            String wrap = CoolEmojisConfig.getEmojiWrapChar();
            int codepoint = CoolEmojisConfig.getInitialEmojiCodepoint();
            for (File f : emojiImages) {
                String name = StringUtils.substringBefore(f.getName(), ".png");
                String emojiChar = new String(Character.toChars(codepoint));

                providers.add(new FontEntry(name, emojiChar));
                map.add(wrap + name + wrap + "=" + emojiChar);

                writeToZip(packZipStream, "assets/minecraft/textures/emoji/" + f.getName(), new FileInputStream(f));

                codepoint++;
            }

            // create font json file, copy it into zip
            Gson gson = new Gson();
            JsonObject fontJson = new JsonObject();
            Type listType = new TypeToken<List<FontEntry>>() {}.getType();
            fontJson.add("providers", gson.toJsonTree(providers, listType));
            writeToZip(packZipStream, "assets/minecraft/font/default.json",
                    new ByteArrayInputStream(fontJson.toString().getBytes(StandardCharsets.UTF_8)));

            packZipStream.close();
            fos.close();

            // create map file
            String mapString = String.join("\n", map);
            fos = new FileOutputStream(outputPath.resolve("cool-emojis-map.txt").toFile());
            fos.write(mapString.getBytes(StandardCharsets.UTF_8));
            fos.close();

            // success
            return true;
        } catch (IOException e) {
            CoolEmojis.LOGGER.error("Failed to generate emoji pack!");
            e.printStackTrace();
        }

        return false;
    }

    private static void writeToZip(ZipOutputStream zipOut, String name, InputStream in) throws IOException {
        zipOut.putNextEntry(new ZipEntry(name));
        byte[] bytes = new byte[1024];
        int length;
        while((length = in.read(bytes)) >= 0) {
            zipOut.write(bytes, 0, length);
        }
        in.close();
    }

    private static class FontEntry {
        private final String type = "bitmap";
        private String file;
        private final int ascent = 8;
        private final int height = 10;
        private String[] chars;

        FontEntry(String f, String c) {
            file = "emoji/" + f + ".png";
            chars = new String[] { c };
        }
    }
}
